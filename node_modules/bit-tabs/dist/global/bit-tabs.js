/*[process-shim]*/
(function(global, env) {
	// jshint ignore:line
	if (typeof process === "undefined") {
		global.process = {
			argv: [],
			cwd: function() {
				return "";
			},
			browser: true,
			env: {
				NODE_ENV: env || "development"
			},
			version: "",
			platform:
				global.navigator &&
				global.navigator.userAgent &&
				/Windows/.test(global.navigator.userAgent)
					? "win"
					: ""
		};
	}
})(
	typeof self == "object" && self.Object == Object
		? self
		: typeof process === "object" &&
		  Object.prototype.toString.call(process) === "[object process]"
			? global
			: window,
	"development"
);

/*[global-shim-start]*/
(function(exports, global, doEval) {
	// jshint ignore:line
	var origDefine = global.define;

	var get = function(name) {
		var parts = name.split("."),
			cur = global,
			i;
		for (i = 0; i < parts.length; i++) {
			if (!cur) {
				break;
			}
			cur = cur[parts[i]];
		}
		return cur;
	};
	var set = function(name, val) {
		var parts = name.split("."),
			cur = global,
			i,
			part,
			next;
		for (i = 0; i < parts.length - 1; i++) {
			part = parts[i];
			next = cur[part];
			if (!next) {
				next = cur[part] = {};
			}
			cur = next;
		}
		part = parts[parts.length - 1];
		cur[part] = val;
	};
	var useDefault = function(mod) {
		if (!mod || !mod.__esModule) return false;
		var esProps = { __esModule: true, default: true };
		for (var p in mod) {
			if (!esProps[p]) return false;
		}
		return true;
	};

	var hasCjsDependencies = function(deps) {
		return (
			deps[0] === "require" && deps[1] === "exports" && deps[2] === "module"
		);
	};

	var modules =
		(global.define && global.define.modules) ||
		(global._define && global._define.modules) ||
		{};
	var ourDefine = (global.define = function(moduleName, deps, callback) {
		var module;
		if (typeof deps === "function") {
			callback = deps;
			deps = [];
		}
		var args = [],
			i;
		for (i = 0; i < deps.length; i++) {
			args.push(
				exports[deps[i]]
					? get(exports[deps[i]])
					: modules[deps[i]] || get(deps[i])
			);
		}
		// CJS has no dependencies but 3 callback arguments
		if (hasCjsDependencies(deps) || (!deps.length && callback.length)) {
			module = { exports: {} };
			args[0] = function(name) {
				return exports[name] ? get(exports[name]) : modules[name];
			};
			args[1] = module.exports;
			args[2] = module;
		} else if (!args[0] && deps[0] === "exports") {
			// Babel uses the exports and module object.
			module = { exports: {} };
			args[0] = module.exports;
			if (deps[1] === "module") {
				args[1] = module;
			}
		} else if (!args[0] && deps[0] === "module") {
			args[0] = { id: moduleName };
		}

		global.define = origDefine;
		var result = callback ? callback.apply(null, args) : undefined;
		global.define = ourDefine;

		// Favor CJS module.exports over the return value
		result = module && module.exports ? module.exports : result;
		modules[moduleName] = result;

		// Set global exports
		var globalExport = exports[moduleName];
		if (globalExport && !get(globalExport)) {
			if (useDefault(result)) {
				result = result["default"];
			}
			set(globalExport, result);
		}
	});
	global.define.orig = origDefine;
	global.define.modules = modules;
	global.define.amd = true;
	ourDefine("@loader", [], function() {
		// shim for @@global-helpers
		var noop = function() {};
		return {
			get: function() {
				return { prepareGlobal: noop, retrieveGlobal: noop };
			},
			global: global,
			__exec: function(__load) {
				doEval(__load.source, global);
			}
		};
	});
})(
	{},
	typeof self == "object" && self.Object == Object
		? self
		: typeof process === "object" &&
		  Object.prototype.toString.call(process) === "[object process]"
			? global
			: window,
	function(__$source__, __$global__) {
		// jshint ignore:line
		eval("(function() { " + __$source__ + " \n }).call(__$global__);");
	}
);

/*bit-tabs@2.0.1#tabs.stache!steal-stache@4.1.2#steal-stache*/
define('bit-tabs/tabs.stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.6.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('tabs.stache', [
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tabsClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#panels',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(../isActive(this))',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'active',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '../makeActive(this)',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t  ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'javascript://',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                './title',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n  ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/panels',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'content',
                false,
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'content',
                false,
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'content',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                9
            ]
        },
        {
            'tokenType': 'done',
            'args': [10]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*bit-tabs@2.0.1#panel.stache!steal-stache@4.1.2#steal-stache*/
define('bit-tabs/panel.stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.6.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('panel.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#if(active)',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'content',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'content',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'content',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                1
            ]
        },
        {
            'tokenType': 'done',
            'args': [1]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*bit-tabs@2.0.1#unstyled*/
define('bit-tabs/unstyled', [
    'exports',
    'can-define/map/map',
    'can-define/list/list',
    'can-stache',
    'can-component',
    'bit-tabs/tabs.stache',
    'bit-tabs/panel.stache',
    'can-view-model'
], function (exports, _map, _list, _canStache, _canComponent, _tabs, _panel, _canViewModel) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BitTabsVM = exports.BitPanelVM = undefined;
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _canStache2 = _interopRequireDefault(_canStache);
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _tabs2 = _interopRequireDefault(_tabs);
    var _panel2 = _interopRequireDefault(_panel);
    var _canViewModel2 = _interopRequireDefault(_canViewModel);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var BitPanelVM = exports.BitPanelVM = _map2.default.extend({
        connectedCallback: function connectedCallback(element) {
            var _this = this;
            (0, _canViewModel2.default)(element.parentNode).addPanel(this);
            return function () {
                (0, _canViewModel2.default)(element.parentNode).removePanel(_this);
            };
        },
        title: 'string',
        active: { default: false }
    });
    _canComponent2.default.extend({
        tag: 'bit-panel',
        view: _panel2.default,
        ViewModel: BitPanelVM
    });
    var BitTabsVM = exports.BitTabsVM = _map2.default.extend({
        active: 'any',
        panels: {
            default: function _default() {
                return [];
            }
        },
        tabsClass: {
            type: 'string',
            default: ''
        },
        addPanel: function addPanel(panel) {
            if (this.panels.length === 0) {
                this.makeActive(panel);
            }
            this.panels.push(panel);
        },
        removePanel: function removePanel(panel) {
            var panels = this.panels;
            panels.splice(panels.indexOf(panel), 1);
            if (panel === this.active) {
                if (panels.length) {
                    this.makeActive(panels[0]);
                } else {
                    this.active = undefined;
                }
            }
        },
        makeActive: function makeActive(panel) {
            this.active = panel;
            this.panels.forEach(function (panel) {
                panel.active = false;
            });
            panel.active = true;
        },
        isActive: function isActive(panel) {
            return this.active == panel;
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'bit-tabs',
        view: _tabs2.default,
        ViewModel: BitTabsVM
    });
});
/*bit-tabs@2.0.1#bit-tabs*/
define('bit-tabs', [
    'exports',
    'bit-tabs/unstyled',
    'bit-tabs/tabs.less'
], function (exports, _unstyled) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    Object.keys(_unstyled).forEach(function (key) {
        if (key === 'default' || key === '__esModule')
            return;
        Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
                return _unstyled[key];
            }
        });
    });
});
/*[global-shim-end]*/
(function(global) { // jshint ignore:line
	global._define = global.define;
	global.define = global.define.orig;
}
)(typeof self == "object" && self.Object == Object ? self : (typeof process === "object" && Object.prototype.toString.call(process) === "[object process]") ? global : window);
//# sourceMappingURL=bit-tabs.js.map